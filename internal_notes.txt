Mögliche Optimierungen:
=======================
- Herausziehen der Modulo Operation während der Multiplikation => Nur noch eine Reduktion anstatt Reduktion nach jeder Addition 




scalar:


  .--|--|--|--.--|--|--|--. .--|--|--|--.--|--|--|--. .--|--|--|--.--|--|--|--. .--|--|--|--.--|--|--|--.
0 |  |  |  |  |  |  |  |  | |  |  |  |  |  |  |  |  | |  |  |  |  |  |  |  |  | |  |  |  |  |  |  |  |  | 
  '--|--|--|--'--|--|--|--' '--|--|--|--'--|--|--|--' '--|--|--|--'--|--|--|--' '--|--|--|--'--|--|--|--'

  .--|--|--|--.--|--|--|--. .--|--|--|--.--|--|--|--. .--|--|--|--.--|--|--|--. .--|--|--|--.--|--|--|--.
1 |  |  |  |  |  |  |  |  | |  |  |  |  |  |  |  |  | |  |  |  |  |  |  |  |  | |  |  |  |  |  |  |  |  | 
  '--|--|--|--'--|--|--|--' '--|--|--|--'--|--|--|--' '--|--|--|--'--|--|--|--' '--|--|--|--'--|--|--|--'

  .--|--|--|--.--|--|--|--. .--|--|--|--.--|--|--|--. .--|--|--|--.--|--|--|--. .--|--|--|--.--|--|--|--.
2 |  |  |  |  |  |  |  |  | |  |  |  |  |  |  |  |  | |  |  |  |  |  |  |  |  | |  |  |  |  |  |  |  |  | 
  '--|--|--|--'--|--|--|--' '--|--|--|--'--|--|--|--' '--|--|--|--'--|--|--|--' '--|--|--|--'--|--|--|--'

  .--|--|--|--.--|--|--|--. .--|--|--|--.--|--|--|--. .--|--|--|--.--|--|--|--. .--|--|--|--.--|--|--|--.
3 |  |  |  |  |  |  |  |  | |  |  |  |  |  |  |  |  | |  |  |  |  |  |  |  |  | |  |  |  |  |  |  |  |  | 
  '--|--|--|--'--|--|--|--' '--|--|--|--'--|--|--|--' '--|--|--|--'--|--|--|--' '--|--|--|--'--|--|--|--'
  
  .--|--|--|--.--|--|--|--. .--|--|--|--.--|--|--|--. .--|--|--|--.--|--|--|--. .--|--|--|--.--|--|--|--.
4 |  |  |  |  |  |  |  |  | |  |  |  |  |  |  |  |  | |  |  |  |  |  |  |  |  | |  |  |  |  |  |  |  |  | 
  '--|--|--|--'--|--|--|--' '--|--|--|--'--|--|--|--' '--|--|--|--'--|--|--|--' '--|--|--|--'--|--|--|--'

  .--|--|--|--.--|--|--|--. .--|--|--|--.--|--|--|--. .--|--|--|--.--|--|--|--. .--|--|--|--.--|--|--|--.
5 |  |  |  |  |  |  |  |  | |  |  |  |  |  |  |  |  | |  |  |  |  |  |  |  |  | |  |  |  |  |  |  |  |  | 
  '--|--|--|--'--|--|--|--' '--|--|--|--'--|--|--|--' '--|--|--|--'--|--|--|--' '--|--|--|--'--|--|--|--'
  
An i-ter Stelle:
	Bit == 1 -> x^i taucht in der Gleichung auf
	Bit == 0 -> x^i taucht nicht in der Gleichung auf
	
z.B.:

f = x^2 + 1 => [00..0000101,
				0.........0,
				0.........0,
				0.........0,
				0.........0,
				0.........0]

uint32_t:

4 Bytes:
.--|--|--|--.
|  |  |  |  |
'--|--|--|--'

32 Bit:
      3             2             1             0
 a  b  c  d    e  f  g  h    i  j  k  l    m  n  o  p
.--|--|--|--. .--|--|--|--. .--|--|--|--. .--|--|--|--.
|  |  |  |  | |  |  |  |  | |  |  |  |  | |  |  |xx|xx|
'--|--|--|--' '--|--|--|--' '--|--|--|--' '--|--|--|--'

x = 1 Bit

Binäre Polynomquadrierung:

		  						  3             2             1             0
							 a  b  c  d    e  f  g  h    i  j  k  l    m  n  o  p
	  						.--|--|--|--. .--|--|--|--. .--|--|--|--. .--|--|--|--.
							|  |  |  |  | |  |  |  |  | |  |  |  |  | |..|A2|A1|A0|
							'--|--|--|--' '--|--|--|--' '--|--|--|--' '--|--|--|--'
							
							
													 =======>

 0  a  0  b     0  c  0  d   0  e  0  f    0  g  0  h    	 0  i  0  j    0  k  0  l    0  m  0  n    0  o  0  p
.--|--|--|--. .--|--|--|--. .--|--|--|--. .--|--|--|--. 	.--|--|--|--. .--|--|--|--. .--|--|--|--. .--|--|--|--.
|  |  |  |  | |  |  |  |  | |  |  |  |  | |  |  |  |  | 	|  |  |  |  | |  |  |  |  | |  |  |..|C4| |C3|C2|C1|C0|
'--|--|--|--' '--|--|--|--' '--|--|--|--' '--|--|--|--' 	'--|--|--|--' '--|--|--|--' '--|--|--|--' '--|--|--|--' 

A_0 = C_0
A_1 = C_2
A_2 = C_4
A_3 = C_6
...
A_i = C_2i

Lookup:

						A_i
+---------------------------------------------------------+
|														  |

			A_i,1						A_i,0
+----------------------------+----------------------------+
|       3             2      |      1             0       |
   a  b  c  d    e  f  g  h    i  j  k  l    m  n  o  p
  .--|--|--|--. .--|--|--|--. .--|--|--|--. .--|--|--|--.
  |  |  |  |  | |  |  |  |  | |  |  |  |  | |  |  |  |  |
  '--|--|--|--' '--|--|--|--' '--|--|--|--' '--|--|--|--'
  
	A_i,3			A_i,2		  A_i,1			A_i,0
+--------------+-------------+-------------+--------------+
|       3      |      2      |      1      |      0       |
   a  b  c  d    e  f  g  h    i  j  k  l    m  n  o  p
  .--|--|--|--. .--|--|--|--. .--|--|--|--. .--|--|--|--.
  |  |  |  |  | |  |  |  |  | |  |  |  |  | |  |  |  |  |
  '--|--|--|--' '--|--|--|--' '--|--|--|--' '--|--|--|--'
  
  A_i,7	  A_i,6  A_i,5  A_i,4  A_i,3 ...
+-------+------+------+------+------+------+------+-------+
|       |      |      |      |      |      |      |       |
   a  b  c  d    e  f  g  h    i  j  k  l    m  n  o  p
  .--|--|--|--. .--|--|--|--. .--|--|--|--. .--|--|--|--.
  |  |  |  |  | |  |  |  |  | |  |  |  |  | |  |  |  |  |
  '--|--|--|--' '--|--|--|--' '--|--|--|--' '--|--|--|--'

z.B. Für A_i in 8 Teile je 4 Bit:

A_i,7 = (A_i >> 7*8) && 255
A_i,6 = (A_i >> 6*8) && 255
A_i,5 = (A_i >> 5*8) && 255
A_i,4 = (A_i >> 4*8) && 255
A_i,3 = (A_i >> 3*8) && 255
A_i,2 = (A_i >> 2*8) && 255
A_i,1 = (A_i >> 1*8) && 255
A_i,0 = A_i && 255

+--------+-------------+---------+
|  A_i,j |    C_2i,k   | Dezimal |
+--------+-------------+---------+
| 0x0000 | 0x0000 0000 |	0	 | 0	0
| 0x0001 | 0x0000 0001 |	1	 | 0	2^0
| 0x0010 | 0x0000 0100 |	4	 | 1	2^2
| 0x0011 | 0x0000 0101 |	5	 | 1	2^2+2^0
| 0x0100 | 0x0001 0000 |	16	 | 2 	2^4
| 0x0101 | 0x0001 0001 |	17	 | 2 	2^4+2^0
| 0x0110 | 0x0001 0100 |	20	 | 2	2^4+2^2
| 0x0111 | 0x0001 0101 |	21	 | 2	2^4+2^2+2^0
| 0x1000 | 0x0100 0000 |	64	 | 3	2^6+2^0
| 0x1001 | 0x0100 0001 |	65	 | 3	2^6+2^2
| 0x1010 | 0x0100 0100 |	68	 | 3	2^6+2^2+2^0
| 0x1011 | 0x0100 0101 |	69	 | 3	2^6+2^4+2^2
| 0x1100 | 0x0101 0000 |	80	 | 3	...
| 0x1101 | 0x0101 0001 |	81	 | 3
| 0x1110 | 0x0101 0100 |	84	 | 3
| 0x1111 | 0x0101 0101 |	85	 | 3
+--------+-------------+---------+

Generierung der Lookup Tabelle in Java (c analog):

		int partitions = 8;
		int lookupTablePow = 32/partitions;
		
		int[] results = new int[(int) Math.pow(2,lookupTablePow)];
		int resultPointer = 0;
		
		results[resultPointer++] = 0; // First Entry is 0
		
		for(int i=0;i < lookupTablePow;i+=1) {	
			int list = resultPointer;
			for(int j=0;j<list;j++) {
				results[resultPointer++] = (int) (Math.pow(2,i*2)+results[j]);
			}
		}

Insgesamt müssen für ein uint32_t 16 Lookups gemacht werden in diesem Beispiel. 
In der Implementierung wird ein Parameter partitions eingeführt, der die Anzahl der Partitionen eines 32bit uint32_t-Worts bestimmt und damit auch die implizit die Größe der Lookup Tabelle:
+----------------+--------------------------+-------------+
|   Partitions   | Anzahl Zeilen in Tabelle |   Speicher  |
+----------------+--------------------------+-------------+
|       1        |          2^32			|	~17179 MB |	
|       2        |          2^16			|	~262 KB	  |	
|	    4		 |		    2^8			    |	1 KB	  |
|	    8		 |			2^4				|	64 B	  |
|	    16		 |			2^2				|	16 B	  |
|		32		 |			2^1				|	8 B		  |
+----------------+--------------------------+-------------+
