/*
 * Implementation of shift operations
 */

#include <stdio.h>
#include <stdint.h>

/*
 * FUNCTION
 *  shiftr
 *
 * INPUT
 *   length la of vector
 *	 input vector a
 *   shift k
 *	 
 *
 * OUTPUT
 *   result vector b
 * 
 * RETURN
 *   -
 * 
 * DESCRIPTION/REMARKS
 *   Shifts vector a k digits to the right and stores result in vector c. 
 * 
 * EXAMPLE
 * 	 a = x^2 + x^1 + 1 => [00000111,0,0,0]
 *   k = 1
 *	 f = x^3 + 1
 *
 *	 result = a >> k mod f = ...?
 *
 */
void shiftr(uint32_t la, uint32_t *a, uint32_t k, uint32_t *b) {
	// b = a >> k for a = a[t-1]...a[0]	 
	uint32_t ws;	// Word internal shift value
	uint32_t i;	// loopctr
	uint32_t uflow;	// Contains underflow of upper byte
	uint32_t cpy;	// Contains copy of current byte 

	// Copy a to result array
	for(i = 0; i < la; i++)
		b[i] = a[i];

	while(k > 0){
		if(k > 31){	// 32 bits is undefined in c ("nice" feature for a lovely sunday afternoon...) 
		    ws = 31;
		    k -= 31;
		} else {
		    ws = k;
		    k = 0;
		}

		uflow = (b[la-1] << (32-ws)); // Prepares underflow for successor byte
		b[la-1] >>= ws;		
		for(i = la-2; i >=1; i--){
			cpy = b[i];
			b[i] = (uflow | (b[i] >> ws));
			uflow = (cpy << (32-ws));
		}
		b[0] = (uflow | (b[0] >> ws)); // Needed to circumvent uint32_t underflow	
	}
}

/*
 * FUNCTION
 *  shiftBr
 *
 * INPUT
 *   length l of vector a
 *   vector a
 *
 * OUTPUT
 *   a >> 1
 * 
 * RETURN
 *   -
 * 
 * DESCRIPTION/REMARKS
 *   Shifts vector a 1 digit to the right 
 * 
 */
void shiftBr(uint32_t l, uint32_t *a){
	int i;
	uint32_t lsb;
	uint32_t tmp;

	lsb = (a[l-1] & 0x00000001) << 31;
	a[l-1] >>= 1;

	for(i = l-2; i >= 0; i--){
		tmp = (a[i] & 0x00000001) << 31;		
		a[i] = ((a[i] >> 1) | lsb);
		lsb = tmp;		
	}
}

/*
 * FUNCTION
 *  shiftl
 *
 * INPUT
 *   length la of vector
 *	 input vector a
 *   shift k
 *   length lb of 
 *	 input vector b
 *	 
 *
 * OUTPUT
 *   result vector b
 * 
 * RETURN
 *   -
 * 
 * DESCRIPTION/REMARKS
 *   Shifts vector a k digits to the left and stores result in vector c. 
 * 
 * EXAMPLE
 * 	 a = x^2 + x^1 + 1 => [00000111,0,0,0]
 *   k = 1
 *	 f = x^3 + 1
 *
 *	 result = a << k 
 *
 */
void shiftl(uint32_t la, uint32_t *a, uint32_t k, uint32_t lb, uint32_t *b) {
	// b = a << k mod f for a = a[t-1]...a[0]	 
	uint32_t ws;	// Word internal shift value
	uint32_t i;	// loopctr
	uint32_t oflow;	// Contains overflow of lower byte
	uint32_t cpy;	// Contains copy of current byte

	// Copy a to result array
	for(i = 0; i < la; i++)
		b[i] = a[i];

	while(k > 0){
		if(k > 31){	// 32 bits is undefined in c ("nice" feature for a lovely sunday afternoon...) 
		    ws = 31;
		    k -= 31;
		} else {
		    ws = k;
		    k = 0;
		}

		oflow = (b[0] >> (32-ws)); // Prepares underflow for successor byte
		b[0] <<= ws;		
		for(i = 1; i < lb; i++){
			cpy = b[i];
			b[i] = (oflow | (b[i] << ws));
			oflow = (cpy >> (32-ws));
		}	
	}
}

/*
 * FUNCTION
 *  shiftBl
 *
 * INPUT
 *   length l of vector a
 *   vector a
 *
 * OUTPUT
 *   a << 1
 * 
 * RETURN
 *   -
 * 
 * DESCRIPTION/REMARKS
 *   Shifts vector a 1 digit to the left 
 * 
 */
void shiftBl(uint32_t l, uint32_t *a){
	int i;
	uint32_t msb;
	uint32_t tmp;

	msb = (a[0] & 0x80000000) >> 31;
	a[0] <<= 1;

	for(i = 1; i < l; i++){
		tmp = (a[i] & 0x80000000) >> 31;		
		a[i] = ((a[i] << 1) | msb);
		msb = tmp;		
	}
}
